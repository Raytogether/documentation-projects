{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 Git and Borg Backup Implementation Guide\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This document details the comprehensive code backup solution implemented on April 6, 2025. The system provides multiple layers of protection for code projects through Git version control, GitHub remote repositories, and local Borg backups.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Table of Contents\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab {\field{\*\fldinst{HYPERLINK "#overview"}}{\fldrslt{\ul
Overview
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab {\field{\*\fldinst{HYPERLINK "#system-components"}}{\fldrslt{\ul
System Components
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab {\field{\*\fldinst{HYPERLINK "#initial-setup"}}{\fldrslt{\ul
Initial Setup
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab {\field{\*\fldinst{HYPERLINK "#github-remote-repository-setup"}}{\fldrslt{\ul
GitHub Remote Repository Setup
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab {\field{\*\fldinst{HYPERLINK "#borg-backup-configuration"}}{\fldrslt{\ul
Borg Backup Configuration
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 6.\tx360\tab {\field{\*\fldinst{HYPERLINK "#automation-setup"}}{\fldrslt{\ul
Automation Setup
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 7.\tx360\tab {\field{\*\fldinst{HYPERLINK "#file-organization"}}{\fldrslt{\ul
File Organization
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 8.\tx360\tab {\field{\*\fldinst{HYPERLINK "#usage-instructions"}}{\fldrslt{\ul
Usage Instructions
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 9.\tx360\tab {\field{\*\fldinst{HYPERLINK "#best-practices"}}{\fldrslt{\ul
Best Practices
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 10.\tx360\tab {\field{\*\fldinst{HYPERLINK "#troubleshooting"}}{\fldrslt{\ul
Troubleshooting
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Overview\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The code backup system consists of three main layers:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab {\b Git Version Control}: Local Git repositories for each code project\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab {\b GitHub Remote Repositories}: Remote copies of all repositories\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab {\b Borg Backup}: Local encrypted backup of all code directories\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This multi-layered approach provides: - Granular version history through Git - Off-site backup through GitHub - Point-in-time snapshots through Borg - Automated daily backups\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 System Components\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b Git repositories}: Located in {\f1 ~/code/}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b GitHub repositories}: Under username {\f1 Raytogether}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b Borg repository}: Located at {\f1 ~/borg-repos/code-backup}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b Backup scripts}:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 ~/code/backup_code.sh}: Main backup script\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 ~/code/setup_github_repos.sh}: GitHub repository setup script\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Initial Setup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Git Repository Initialization\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Git repositories were initialized for all code projects:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # For each project directory\line
cd ~/code/project-name\line
git init\line
git add .\line
git commit -m "Initial commit"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Projects initialized: - {\f1 borg-backup} - {\f1 borg-research} - {\f1 duplicity-b2-backup} - {\f1 warp-ai}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Basic .gitignore Configuration\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Each repository includes a .gitignore file to exclude: - Log files - Environment files - Cache directories - Build artifacts\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 GitHub Remote Repository Setup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 GitHub repositories were created using the GitHub CLI:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab {\b Authentication Setup}:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 gh auth login --web\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab {\b Repository Creation Script}: Created and executed {\f1 ~/code/setup_github_repos.sh} to:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Create README.md files if missing\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Create GitHub repositories\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Add remote origins\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Push existing code\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The script loops through each Git repository in {\f1 ~/code/} and performs the setup automatically.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 GitHub Repository URLs\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab https://github.com/Raytogether/borg-backup\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab https://github.com/Raytogether/borg-research\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab https://github.com/Raytogether/duplicity-b2-backup\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab https://github.com/Raytogether/warp-ai\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Borg Backup Configuration\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Borg Repository Creation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A dedicated Borg repository was created for code backups:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 borg init --encryption=repokey ~/borg-repos/code-backup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Backup Script Configuration\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The backup script {\f1 ~/code/backup_code.sh} was created with: - Automatic repository detection - Exclusion of unnecessary files - Timestamp naming - Retention policy settings\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Key Backup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Borg repository key is backed up in {\f1 ~/code/borg-backup/code-backup-key.txt}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Automation Setup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Cron Configuration\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A cron job was set up to run the backup script daily at 1:00 AM:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 crontab -l | \{ cat; echo "0 1 * * * $HOME/code/backup_code.sh"; \} | crontab -\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Backup Retention Policy\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The backup script automatically prunes old backups with the following retention policy: - Daily backups for 7 days - Weekly backups for 4 weeks - Monthly backups for 6 months\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 File Organization\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~/code/\line
\u9500 ?\u9472 ?\u9472 ? borg-backup/          # Git repository\line
\u9500 ?\u9472 ?\u9472 ? borg-research/        # Git repository\line
\u9500 ?\u9472 ?\u9472 ? duplicity-b2-backup/  # Git repository\line
\u9500 ?\u9472 ?\u9472 ? warp-ai/              # Git repository\line
\u9500 ?\u9472 ?\u9472 ? backup_code.sh        # Borg backup script\line
\u9492 ?\u9472 ?\u9472 ? setup_github_repos.sh # GitHub setup script\line
\line
~/borg-repos/\line
\u9492 ?\u9472 ?\u9472 ? code-backup/          # Borg repository for code\line
\line
~/Documents/\line
\u9492 ?\u9472 ?\u9472 ? git-journey/          # This documentation\line
    \u9500 ?\u9472 ?\u9472 ? README.md\line
    \u9500 ?\u9472 ?\u9472 ? git-journey.md\line
    \u9492 ?\u9472 ?\u9472 ? backup-YYYYMMDD/  # Backup of documentation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Usage Instructions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Daily Git Workflow\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Navigate to your project\line
cd ~/code/project-name\line
\line
# Make changes to your files\line
# ...\line
\line
# Stage changes\line
git add .\line
\line
# Commit changes\line
git commit -m "Description of changes"\line
\line
# Push to GitHub\line
git push origin main\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Manual Borg Backup (if needed)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Run the backup script\line
~/code/backup_code.sh\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Viewing Backups\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # List all Borg backups\line
borg list ~/borg-repos/code-backup\line
\line
# View details of a specific backup\line
borg info ~/borg-repos/code-backup::backup-name\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Restoring from Borg Backup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Restore entire backup\line
borg extract ~/borg-repos/code-backup::backup-name\line
\line
# Restore specific file or directory\line
borg extract ~/borg-repos/code-backup::backup-name path/to/file\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Best Practices\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab {\b Commit Frequently}: Make small, focused commits with clear messages\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab {\b Push Regularly}: Push to GitHub at least daily\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab {\b Review Backups}: Periodically check that Borg backups are running\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab {\b Test Restores}: Occasionally test the restore process\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab {\b Update Documentation}: Keep this documentation up to date\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 6.\tx360\tab {\b Secure Keys}: Keep the Borg repository key secure\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 7.\tx360\tab {\b Handle Sensitive Data}: Do not commit sensitive data to Git\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Troubleshooting\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 GitHub Authentication Issues\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you encounter GitHub authentication issues:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 gh auth login --web\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Borg Backup Failures\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If Borg backups fail, check: 1. Repository path 2. Available disk space 3. Repository permissions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel2 \b \fs28 Manual Repository Pruning\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To manually prune backups:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 borg prune -v --list --keep-daily=7 --keep-weekly=4 --keep-monthly=6 ~/borg-repos/code-backup\par}
