# Git and Borg Backup Implementation Guide

This document details the comprehensive code backup solution implemented
on April 6, 2025. The system provides multiple layers of protection for
code projects through Git version control, GitHub remote repositories,
and local Borg backups.

## Table of Contents

1.  [Overview](#overview)
2.  [System Components](#system-components)
3.  [Initial Setup](#initial-setup)
4.  [GitHub Remote Repository Setup](#github-remote-repository-setup)
5.  [Borg Backup Configuration](#borg-backup-configuration)
6.  [Automation Setup](#automation-setup)
7.  [File Organization](#file-organization)
8.  [Usage Instructions](#usage-instructions)
9.  [Best Practices](#best-practices)
10. [Troubleshooting](#troubleshooting)

## Overview

The code backup system consists of three main layers:

1.  **Git Version Control**: Local Git repositories for each code
    project
2.  **GitHub Remote Repositories**: Remote copies of all repositories
3.  **Borg Backup**: Local encrypted backup of all code directories

This multi-layered approach provides: - Granular version history through
Git - Off-site backup through GitHub - Point-in-time snapshots through
Borg - Automated daily backups

## System Components

-   **Git repositories**: Located in `~/code/`
-   **GitHub repositories**: Under username `Raytogether`
-   **Borg repository**: Located at `~/borg-repos/code-backup`
-   **Backup scripts**:
    -   `~/code/backup_code.sh`: Main backup script
    -   `~/code/setup_github_repos.sh`: GitHub repository setup script

## Initial Setup

### Git Repository Initialization

Git repositories were initialized for all code projects:

``` bash
# For each project directory
cd ~/code/project-name
git init
git add .
git commit -m "Initial commit"
```

Projects initialized: - `borg-backup` - `borg-research` -
`duplicity-b2-backup` - `warp-ai`

### Basic .gitignore Configuration

Each repository includes a .gitignore file to exclude: - Log files -
Environment files - Cache directories - Build artifacts

## GitHub Remote Repository Setup

GitHub repositories were created using the GitHub CLI:

1.  **Authentication Setup**:

    ``` bash
    gh auth login --web
    ```

2.  **Repository Creation Script**: Created and executed
    `~/code/setup_github_repos.sh` to:

    -   Create README.md files if missing
    -   Create GitHub repositories
    -   Add remote origins
    -   Push existing code

The script loops through each Git repository in `~/code/` and performs
the setup automatically.

### GitHub Repository URLs

-   https://github.com/Raytogether/borg-backup
-   https://github.com/Raytogether/borg-research
-   https://github.com/Raytogether/duplicity-b2-backup
-   https://github.com/Raytogether/warp-ai

## Borg Backup Configuration

### Borg Repository Creation

A dedicated Borg repository was created for code backups:

``` bash
borg init --encryption=repokey ~/borg-repos/code-backup
```

### Backup Script Configuration

The backup script `~/code/backup_code.sh` was created with: - Automatic
repository detection - Exclusion of unnecessary files - Timestamp
naming - Retention policy settings

### Key Backup

Borg repository key is backed up in
`~/code/borg-backup/code-backup-key.txt`.

## Automation Setup

### Cron Configuration

A cron job was set up to run the backup script daily at 1:00 AM:

``` bash
crontab -l | { cat; echo "0 1 * * * $HOME/code/backup_code.sh"; } | crontab -
```

### Backup Retention Policy

The backup script automatically prunes old backups with the following
retention policy: - Daily backups for 7 days - Weekly backups for 4
weeks - Monthly backups for 6 months

## File Organization

    ~/code/
    ├── borg-backup/          # Git repository
    ├── borg-research/        # Git repository
    ├── duplicity-b2-backup/  # Git repository
    ├── warp-ai/              # Git repository
    ├── backup_code.sh        # Borg backup script
    └── setup_github_repos.sh # GitHub setup script

    ~/borg-repos/
    └── code-backup/          # Borg repository for code

    ~/Documents/
    └── git-journey/          # This documentation
        ├── README.md
        ├── git-journey.md
        └── backup-YYYYMMDD/  # Backup of documentation

## Usage Instructions

### Daily Git Workflow

``` bash
# Navigate to your project
cd ~/code/project-name

# Make changes to your files
# ...

# Stage changes
git add .

# Commit changes
git commit -m "Description of changes"

# Push to GitHub
git push origin main
```

### Manual Borg Backup (if needed)

``` bash
# Run the backup script
~/code/backup_code.sh
```

### Viewing Backups

``` bash
# List all Borg backups
borg list ~/borg-repos/code-backup

# View details of a specific backup
borg info ~/borg-repos/code-backup::backup-name
```

### Restoring from Borg Backup

``` bash
# Restore entire backup
borg extract ~/borg-repos/code-backup::backup-name

# Restore specific file or directory
borg extract ~/borg-repos/code-backup::backup-name path/to/file
```

## Best Practices

1.  **Commit Frequently**: Make small, focused commits with clear
    messages
2.  **Push Regularly**: Push to GitHub at least daily
3.  **Review Backups**: Periodically check that Borg backups are running
4.  **Test Restores**: Occasionally test the restore process
5.  **Update Documentation**: Keep this documentation up to date
6.  **Secure Keys**: Keep the Borg repository key secure
7.  **Handle Sensitive Data**: Do not commit sensitive data to Git

## Troubleshooting

### GitHub Authentication Issues

If you encounter GitHub authentication issues:

``` bash
gh auth login --web
```

### Borg Backup Failures

If Borg backups fail, check: 1. Repository path 2. Available disk space
3. Repository permissions

### Manual Repository Pruning

To manually prune backups:

``` bash
borg prune -v --list --keep-daily=7 --keep-weekly=4 --keep-monthly=6 ~/borg-repos/code-backup
```
