# Journey to Code: From Bash to GKrellm

## Learning Path Overview

1.  **Bash Scripting Foundation**
    -   Basic syntax and commands
    -   Shell scripting fundamentals
    -   System monitoring scripts
    -   Automation basics
    -   File manipulation and text processing
2.  **Python Development**
    -   Basic Python syntax
    -   Object-oriented programming
    -   PyGObject (GTK bindings)
    -   System monitoring with Python
    -   Building desktop applications
3.  **C Programming**
    -   C fundamentals
    -   Memory management
    -   GTK4 development
    -   System-level programming
    -   Performance optimization
4.  **GKrellm Project Goals**
    -   Study existing codebase
    -   Understand system monitoring implementations
    -   GTK widget development
    -   Fork and modernize
    -   Add new features

## Next Steps

-   [ ] Set up development environment
-   [ ] Begin Bash scripting tutorials
-   [ ] Study GKrellm source code
-   [ ] Create first system monitoring script

## Resources

(To be populated with specific learning materials)

## Project Notes

## GKrellm Project Information

### License Status

-   GKrellm is licensed under GPL (both v2.0 and v3.0 versions exist in
    different forks)
-   This makes it perfectly legal to fork and modify, as long as you
    maintain the GPL license
-   Your modifications must also be open source under GPL

### Development Status

-   Original repository: https://git.srcbox.net/gkrellm/gkrellm
-   Multiple active forks exist on GitHub
-   Recent activity:
    -   Some forks are actively maintained (latest updates in 2025)
    -   Active plugin development continues (e.g., gkrellm-nvidia
        updated in March 2025)
    -   Community is still creating themes and plugins

### Notable Repositories

1.  pete4abw/gkrellm - Fork with updates (GPL-3.0)
2.  dracula/gkrellm - Modern theme development (MIT License)
3.  carcass82/gkrellm-nvidia - Active plugin development (GPL-2.0)

### Project Opportunities

1.  Modernization
    -   Update to GTK4
    -   Add modern system monitoring features
    -   Improve UI/UX
2.  Plugin Development
    -   Create new plugins for modern hardware
    -   Update existing plugins
3.  Theme Development
    -   Create modern themes
    -   Improve existing themes

## Learning Resources and Timeline

### Month 1-2: Bash Scripting

1.  Resources:
    -   Linux Command Line Basics (linuxcommand.org)
    -   Bash Guide for Beginners (tldp.org)
    -   ShellCheck (shellcheck.net) for script validation
2.  Practice Projects:
    -   System resource monitoring script
    -   Log file analyzer
    -   Automated backup script

### Month 2-3: Python Basics

1.  Resources:
    -   Python.org official tutorial
    -   Automate the Boring Stuff with Python
    -   Real Python (realpython.com)
2.  Practice Projects:
    -   Simple system monitor
    -   File system analyzer
    -   Basic GTK application with PyGObject

### Month 3-4: C Programming

1.  Resources:
    -   C Programming Language by K&R
    -   Modern C by Jens Gustedt
    -   GTK4 documentation
2.  Practice Projects:
    -   Memory management exercises
    -   Simple GTK4 applications
    -   Basic system monitoring tool

### Month 4-6: GKrellm Development

1.  Study Existing Code:
    -   Analyze GKrellm architecture
    -   Understand plugin system
    -   Review existing plugins
2.  Development Path:
    -   Create simple plugin
    -   Fork main repository
    -   Begin modernization work

## First Steps (Next 7 Days)

1.  Set up development environment
    -   Install necessary compilers and tools
    -   Configure Git
    -   Set up preferred IDE/editor
2.  Complete first Bash script
    -   Create simple system monitoring script
    -   Use basic commands (ps, top, free)
3.  Clone GKrellm repository
    -   Review code structure
    -   Compile from source
    -   Test basic modifications

## Development Environment Setup

Setting up your development environment is a crucial first step. The
following instructions will help you install all necessary tools and
dependencies on your Fedora system.

### For Fedora systems

``` bash
# Update package listings
dnf check-update

# Install essential development tools
sudo dnf install gcc gcc-c++ make git

# Install Python and pip
sudo dnf install python3 python3-pip

# Install GTK4 development libraries
sudo dnf install gtk4-devel

# For Bash script validation
sudo dnf install ShellCheck

# For development
sudo dnf install cmake

# Install GKrellm to study the current version
sudo dnf install gkrellm
```

After installing these packages, you'll have all the necessary tools to
begin your journey from Bash scripting to GKrellm development. The next
sections will guide you through the practical learning steps.

## Progress Tracking

-   [x] Complete Bash scripting basics
-   [x] Create first system monitoring script
-   [x] Set up development environment
-   [ ] Learn Python fundamentals
-   [ ] Create first GTK application
-   [ ] Complete C programming basics
-   [ ] Successfully compile GKrellm
-   [ ] Create first GKrellm plugin
-   [ ] Begin modernization work

### System Monitoring Achievements

-   [x] Created advanced system monitoring script with comprehensive
    resource tracking
-   [x] Implemented direct sysfs hardware reading for improved
    performance
-   [x] Optimized hardware detection for fans, CPU and GPU temperatures
-   [x] Documented performance improvements with concrete metrics
-   [x] Added robust error handling and graceful degradation
-   [x] Implemented multi-stage sensor detection for cross-platform
    compatibility

Remember: Focus on one step at a time and ensure solid understanding
before moving forward.
