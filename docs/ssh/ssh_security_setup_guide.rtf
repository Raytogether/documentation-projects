{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 SSH Setup and Security Guide\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Initial Setup and Installation\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Check SSH service status:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 systemctl status sshd\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Generate SSH host keys (if missing):\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sudo ssh-keygen -A\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Enable and start SSH service:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sudo systemctl enable sshd\line
sudo systemctl start sshd\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Security Configuration\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Set up SSH directory and permissions:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 mkdir -p ~/.ssh\line
chmod 700 ~/.ssh\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Generate SSH key pair:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -C "user@hostname"\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Configure authorized keys:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 touch ~/.ssh/authorized_keys\line
chmod 600 ~/.ssh/authorized_keys\line
cat ~/.ssh/id_ed25519.pub >> ~/.ssh/authorized_keys\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Disable password authentication:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Add to sshd_config:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 PasswordAuthentication no\line
PubkeyAuthentication yes\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Verify and restart SSH:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sudo sshd -t && sudo systemctl restart sshd\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 SSH Client Configuration\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Create and secure SSH config file:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 touch ~/.ssh/config\line
chmod 600 ~/.ssh/config\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Example SSH config:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Basic server configuration\line
Host homeserver\line
    HostName 10.0.0.215\line
    User donald\line
    IdentityFile ~/.ssh/id_ed25519\line
    Port 22\line
    # Performance and security options\line
    Compression yes\line
    ServerAliveInterval 60\line
    ServerAliveCountMax 3\line
    # Security options\line
    HashKnownHosts yes\line
    StrictHostKeyChecking yes\line
\line
# Port forwarding configuration\line
Host homeserver-sync\line
    HostName 10.0.0.215\line
    User donald\line
    IdentityFile ~/.ssh/id_ed25519\line
    # Forward Syncthing web UI\line
    LocalForward 9384 127.0.0.1:8384\line
    # Forward Syncthing sync port\line
    LocalForward 22222 127.0.0.1:22000\line
    # Forward OctoPi\line
    LocalForward 12702 127.0.0.1:12701\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 File Transfers with SSH\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Common file transfer methods:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # SCP - Secure Copy Protocol\line
scp filename.txt user@remote:/path/to/destination/\line
scp user@remote:/path/to/file.txt /local/destination/\line
\line
# SFTP - SSH File Transfer Protocol\line
sftp user@remote\line
> put localfile.txt remotefile.txt\line
> get remotefile.txt localfile.txt\line
> exit\line
\line
# RSYNC - Remote File Synchronization\line
rsync -avz /local/folder/ user@remote:/remote/folder/\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Advanced transfer scenarios:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Copy entire directories recursively with SCP\line
scp -r /local/directory/ user@remote:/remote/directory/\line
\line
# Using compression with SCP for better performance on slow links\line
scp -C largefile.zip user@remote:~/\line
\line
# Resume interrupted transfers with RSYNC\line
rsync --partial --progress largefile.dat user@remote:~/\line
\line
# Limit bandwidth usage with RSYNC\line
rsync --bwlimit=1000 largefile.dat user@remote:~/\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Alternative transfer methods:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Using SSH pipes to transfer files\line
cat file.txt | ssh user@remote "cat > /remote/destination/file.txt"\line
\line
# Create archives during transfer\line
tar czf - /local/folder | ssh user@remote "tar xzf - -C /remote/folder"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Shell Configuration Issues\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Problem identification:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab If you encounter errors during SCP or RSYNC transfers such as \u8220"protocol error\u8221" or \u8220"unexpected output\u8221", it may be caused by shell initialization scripts producing output.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab This commonly occurs with shells like fish that produce output during non-interactive sessions.\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Diagnosing shell output issues:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Test if shell produces unwanted output\line
ssh user@remote true\line
\line
# Check the specific output causing issues\line
ssh -v user@remote true\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Fix for fish shell configuration:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Edit fish configuration on remote server \line
ssh user@remote "nano ~/.config/fish/config.fish"\line
\line
# Modify the file to only run certain commands in interactive sessions:\line
if status is-interactive\line
    # Commands that might produce output (e.g., brew shellenv, welcome messages, etc.)\line
    eval "$(/opt/homebrew/bin/brew shellenv)"\line
    printf "Auto-Warpify is enabled\\n"\line
end\line
\line
# Other commands that are always required (path settings, etc.)\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Other considerations:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Warp terminal\u8217's \u8220"warpification\u8221" feature doesn\u8217't typically interfere with file transfers, but if you suspect issues, you can temporarily disable it with:\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 WARP_SESSION=0 scp file.txt user@remote:~/\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Always ensure your shell configuration files (.bashrc, .zshrc, .config/fish/config.fish) don\u8217't produce output for non-interactive sessions.\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Firewall Configuration\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Check firewall status:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sudo firewall-cmd --state\line
sudo firewall-cmd --list-all\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Enable firewall:\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sudo systemctl enable --now firewalld\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Best Practices\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Always keep private keys secure and never share them\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Regularly backup SSH keys\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Use strong key types (ED25519 preferred)\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Monitor SSH logs for suspicious activity\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Keep SSH server updated\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 6.\tx360\tab Use key-based authentication instead of passwords\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 7.\tx360\tab Configure proper firewall rules\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel1 \b \fs32 Recovery\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If something goes wrong:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 sudo cp /etc/ssh/sshd_config.backup /etc/ssh/sshd_config\line
sudo systemctl restart sshd\par}
