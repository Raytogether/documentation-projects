# SSH Setup and Security Guide

## Initial Setup and Installation

1.  Check SSH service status:

``` bash
systemctl status sshd
```

2.  Generate SSH host keys (if missing):

``` bash
sudo ssh-keygen -A
```

3.  Enable and start SSH service:

``` bash
sudo systemctl enable sshd
sudo systemctl start sshd
```

## Security Configuration

1.  Set up SSH directory and permissions:

``` bash
mkdir -p ~/.ssh
chmod 700 ~/.ssh
```

2.  Generate SSH key pair:

``` bash
ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -C "user@hostname"
```

3.  Configure authorized keys:

``` bash
touch ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
cat ~/.ssh/id_ed25519.pub >> ~/.ssh/authorized_keys
```

4.  Disable password authentication:

``` bash
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
```

Add to sshd_config:

    PasswordAuthentication no
    PubkeyAuthentication yes

5.  Verify and restart SSH:

``` bash
sudo sshd -t && sudo systemctl restart sshd
```

## SSH Client Configuration

Create and secure SSH config file:

``` bash
touch ~/.ssh/config
chmod 600 ~/.ssh/config
```

Example SSH config:

    # Basic server configuration
    Host homeserver
        HostName 10.0.0.215
        User donald
        IdentityFile ~/.ssh/id_ed25519
        Port 22
        # Performance and security options
        Compression yes
        ServerAliveInterval 60
        ServerAliveCountMax 3
        # Security options
        HashKnownHosts yes
        StrictHostKeyChecking yes

    # Port forwarding configuration
    Host homeserver-sync
        HostName 10.0.0.215
        User donald
        IdentityFile ~/.ssh/id_ed25519
        # Forward Syncthing web UI
        LocalForward 9384 127.0.0.1:8384
        # Forward Syncthing sync port
        LocalForward 22222 127.0.0.1:22000
        # Forward OctoPi
        LocalForward 12702 127.0.0.1:12701

## File Transfers with SSH

1.  Common file transfer methods:

``` bash
# SCP - Secure Copy Protocol
scp filename.txt user@remote:/path/to/destination/
scp user@remote:/path/to/file.txt /local/destination/

# SFTP - SSH File Transfer Protocol
sftp user@remote
> put localfile.txt remotefile.txt
> get remotefile.txt localfile.txt
> exit

# RSYNC - Remote File Synchronization
rsync -avz /local/folder/ user@remote:/remote/folder/
```

2.  Advanced transfer scenarios:

``` bash
# Copy entire directories recursively with SCP
scp -r /local/directory/ user@remote:/remote/directory/

# Using compression with SCP for better performance on slow links
scp -C largefile.zip user@remote:~/

# Resume interrupted transfers with RSYNC
rsync --partial --progress largefile.dat user@remote:~/

# Limit bandwidth usage with RSYNC
rsync --bwlimit=1000 largefile.dat user@remote:~/
```

3.  Alternative transfer methods:

``` bash
# Using SSH pipes to transfer files
cat file.txt | ssh user@remote "cat > /remote/destination/file.txt"

# Create archives during transfer
tar czf - /local/folder | ssh user@remote "tar xzf - -C /remote/folder"
```

## Shell Configuration Issues

1.  Problem identification:
    -   If you encounter errors during SCP or RSYNC transfers such as
        "protocol error" or "unexpected output", it may be caused by
        shell initialization scripts producing output.
    -   This commonly occurs with shells like fish that produce output
        during non-interactive sessions.
2.  Diagnosing shell output issues:

``` bash
# Test if shell produces unwanted output
ssh user@remote true

# Check the specific output causing issues
ssh -v user@remote true
```

3.  Fix for fish shell configuration:

``` bash
# Edit fish configuration on remote server 
ssh user@remote "nano ~/.config/fish/config.fish"

# Modify the file to only run certain commands in interactive sessions:
if status is-interactive
    # Commands that might produce output (e.g., brew shellenv, welcome messages, etc.)
    eval "$(/opt/homebrew/bin/brew shellenv)"
    printf "Auto-Warpify is enabled\n"
end

# Other commands that are always required (path settings, etc.)
```

4.  Other considerations:
    -   Warp terminal's "warpification" feature doesn't typically
        interfere with file transfers, but if you suspect issues, you
        can temporarily disable it with:

    ``` bash
    WARP_SESSION=0 scp file.txt user@remote:~/
    ```

    -   Always ensure your shell configuration files (.bashrc, .zshrc,
        .config/fish/config.fish) don't produce output for
        non-interactive sessions.

## Firewall Configuration

1.  Check firewall status:

``` bash
sudo firewall-cmd --state
sudo firewall-cmd --list-all
```

2.  Enable firewall:

``` bash
sudo systemctl enable --now firewalld
```

## Best Practices

1.  Always keep private keys secure and never share them
2.  Regularly backup SSH keys
3.  Use strong key types (ED25519 preferred)
4.  Monitor SSH logs for suspicious activity
5.  Keep SSH server updated
6.  Use key-based authentication instead of passwords
7.  Configure proper firewall rules

## Recovery

If something goes wrong:

``` bash
sudo cp /etc/ssh/sshd_config.backup /etc/ssh/sshd_config
sudo systemctl restart sshd
```
